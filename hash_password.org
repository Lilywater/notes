* linux password one-way hash
** linux user and password related files
Gernerally, the user name is stored in /ect/passwd file, but this file is accessed by any users.
So there's a /ect/shadow file where really stored the hash value of the password which can accessed only by root.


cat /etc/shadow
ddouthitt:$6$QR3drPrQ$JLolPKyiVuXvea1F2IpbPx9F9PEV0s/IGcNCpm6ZrBA6AFDvwHPQG7EsTQHuUqxfCvlsuKRb.O7w5RLPyj8nS/:15119:0:99999:7:::
first "ddouthitt" is the user name.
second between : is 

:$6$QR3drPrQ$JLolPKyiVuXvea1F2IpbPx9F9PEV0s/IGcNCpm6ZrBA6AFDvwHPQG7EsTQHuUqxfCvlsuKRb.O7w5RLPyj8nS/:
 this hash is using method sha-512
*** sha-512 notation
$ is the delima to these fields

 Id.   This identifies the encryption hash method used. A value of 1 denotes MD5; 2 or 2a is Blowfish; 3 is NT Hash; 5 is SHA-256; and 6 is SHA-512.
 Salt. This is used by the encryption algorithms, and could be up to 16 characters.
 Hash. The actual “password” (or hash) is last. MD5 uses 22 characters, SHA-256 uses 43, and SHA-512 uses 86.

*** in this case  
Id $6 means sha-512
Salt.  $QR3drPrQ 
Hash.   $JLolPKyiVuXvea1F2IpbPx9F9PEV0s/IGcNCpm6ZrBA6AFDvwHPQG7EsTQHuUqxfCvlsuKRb.O7w5RLPyj8nS/
     here 86 characters for sha-512 without $ symbol
        Picking apart the example password entry above shows this:

            Id = 6 (SHA-512)
           Salt = QR3drPrQ
           Hash =  JLolPKyiVuXvea1F2IpbPx9F9PEV0s/IGcNCpm6ZrBA6AFDvwHPQG7EsTQHuUqxfCvlsuKRb.O7w5RLPyj8nS/


Base64, on the other hand, grabs 6 bits at a time and maps them to a 64-character alphabet. This means that you need 8 bits (again, one full character) to represent every 6 bits of data, which has half the wasted bits of base16. A base16-encoded string will always be twice as big as the original; a base64-encoded string will only be four thirds as big. For a SHA256 hash, base16 does 64 bytes, but base64 does approximately 43.
