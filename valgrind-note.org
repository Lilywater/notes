* Valgrind 使用简单说明
** how to install valgrind
Valgrind是一个GPL的软件，用于Linux（For x86, amd64 and ppc32）程序的内存调试和代码剖析。你可以在它的环境中运行你的程序来监视内存的使用情况，比如C 语言中的malloc和free或者 C++中的new和 delete。使用Valgrind的工具包，你可以自动的检测许多内存管理和线程的bug，避免花费太多的时间在bug寻找上，使得你的程序更加稳固。

Valgrind 是在linux系统下开发应用程序时用于调试内存问题的工具。它尤其擅长发现内存管理的问题，它可以检查程序运行时的内存泄漏问题。
   它的官方网址是 http://www.valgrind.org/

   下载最新版本的Valgrind，目前是3.2.0。 wget http://www.valgrind.org/downloads/valkyrie-1.2.0.tar.bz2

   执行常规的安装步骤：./confgure && make && make install。注意： 系统必须安装QT的开发包。即便这样在make 时还是出现qplatformdefs.h这个文件找不到的情况，导致make失败。查找系统中的qplatformdefs.h 之后，发现没有存在于qt的标准头文件目录/usr/lib/qt-3.3/include。如是将/usr/lib/qt- 3.3/mkspecs/linux-g++/ 目录下该头文件复制标准头文件目录，重新make ，后面一切OK。
*** Valgrind 安装

1、 到www.valgrind.org下载最新版valgrind-3.2.3.tar.bz2
2、 解压安装包：tar –jxvf valgrind-3.2.3.tar.bz2
3、 解压后生成目录valgrind-3.2.3 
4、 cd valgrind-3.2.3
5、 ./configure
6、 Make;make install

*** Valgrind 使用
用法: valgrind [options] prog-and-args [options]: 常用选项，适用于所有Valgrind工具
-tool=<name> 最常用的选项。运行 valgrind中名为toolname的工具。默认memcheck。
h –help 显示帮助信息。
-version 显示valgrind内核的版本，每个工具都有各自的版本。
q –quiet 安静地运行，只打印错误信息。
v –verbose 更详细的信息, 增加错误数统计。
-trace-children=no|yes 跟踪子线程? [no]
-track-fds=no|yes 跟踪打开的文件描述？[no]
-time-stamp=no|yes 增加时间戳到LOG信息? [no]
-log-fd=<number> 输出LOG到描述符文件 [2=stderr]
-log-file=<file> 将输出的信息写入到filename.PID的文件里，PID是运行程序的进行ID
-log-file-exactly=<file> 输出LOG信息到 file
-log-file-qualifier=<VAR> 取得环境变量的值来做为输出信息的文件名。 [none]
-log-socket=ipaddr:port 输出LOG到socket ，ipaddr:port
LOG信息输出

-xml=yes 将信息以xml格式输出，只有memcheck可用
-num-callers=<number> show <number> callers in stack traces [12]
-error-limit=no|yes 如果太多错误，则停止显示新错误? [yes]
-error-exitcode=<number> 如果发现错误则返回错误代码 [0=disable]
-db-attach=no|yes 当出现错误，valgrind会自动启动调试器gdb。[no]
-db-command=<command> 启动调试器的命令行选项[gdb -nw %f %p]
适用于Memcheck工具的相关选项：

-leak-check=no|summary|full 要求对leak给出详细信息? [summary]
-leak-resolution=low|med|high how much bt merging in leak check [low]
-show-reachable=no|yes show reachable blocks in leak check? [no]


** Simple Examples
初次使用
eg 1. 编译如下代码:  gcc -Wall example.c -g -o example
#include <stdlib.h>

void f(void)
{
   int* x = malloc(10 * sizeof(int));
   x[10] = 0;        // problem 1: heap block overrun
}                    // problem 2: memory leak -- x not freed

int main(void)
{
     f();
     return 0;
}
     注意：gcc 的-g 选项让Valgrind调试输出时指出相应信息的代码所在的行号。

valgrind --tool=memcheck --leak-check=yes ./example
==6742== Memcheck, a memory error detector for x86-linux.
==6742== Copyright (C) 2002-2004, and GNU GPL'd, by Julian Seward et al.
==6742== Using valgrind-2.2.0, a program supervision framework for x86-linux.
==6742== Copyright (C) 2000-2004, and GNU GPL'd, by Julian Seward et al.
==6742== For more details, rerun with: -v
==6742== 
==6742== Invalid write of size 4
==6742==    at 0x8048384: f (example.c:6)
==6742==    by 0x80483AC: main (example.c:12)
==6742== Address 0x1B908050 is 0 bytes after a block of size 40 alloc'd
==6742==    at 0x1B904984: malloc (vg_replace_malloc.c:131)
==6742==    by 0x8048377: f (example.c:5)
==6742==    by 0x80483AC: main (example.c:12)
==6742== 
==6742== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 12 from 1)
==6742== malloc/free: in use at exit: 40 bytes in 1 blocks.
==6742== malloc/free: 1 allocs, 0 frees, 40 bytes allocated.
==6742== For counts of detected errors, rerun with: -v
==6742== searching for pointers to 1 not-freed blocks.
==6742== checked 1360800 bytes.
==6742== 
==6742== 
==6742== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
==6742==    at 0x1B904984: malloc (vg_replace_malloc.c:131)
==6742==    by 0x8048377: f (example.c:5)
==6742==    by 0x80483AC: main (example.c:12)
==6742== 
==6742== LEAK SUMMARY:
==6742==    definitely lost: 40 bytes in 1 blocks.
==6742==    possibly lost:   0 bytes in 0 blocks.
==6742==    still reachable: 0 bytes in 0 blocks.
==6742==         suppressed: 0 bytes in 0 blocks.
==6742== Reachable blocks (those to which a pointer was found) are not shown.
==6742== To see them, rerun with: --show-reachable=yes
   上面的C程序存在两个错误：1. 数组下标越界；2. 分配的内存没有释放，存在内存泄露的问题。对于错误1，看Valgrind的调试信息片断
==6742== Invalid write of size 4
==6742==    at 0x8048384: f (example.c:6)
==6742==    by 0x80483AC: main (example.c:12)
==6742== Address 0x1B908050 is 0 bytes after a block of size 40 alloc'd
==6742==    at 0x1B904984: malloc (vg_replace_malloc.c:131)
==6742==    by 0x8048377: f (example.c:5) 对于错误2，看这个
==6742== malloc/free: 1 allocs, 0 frees, 40 bytes allocated.

......

==6742== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
==6742==    at 0x1B904984: malloc (vg_replace_malloc.c:131)
==6742==    by 0x8048377: f (example.c:5)
==6742==    by 0x80483AC: main (example.c:12)


eg2. 
----------------
#include <stdlib.h>
#include <stdio.h>
struct node
{
int entry;
struct node * next;
}

main()
{
  unsigned char len = -1;
  size_t len_s = len;
  char * p = malloc(len_s);
  struct node * list;
  if(!p)
  perror("the malloc is:");
  list= malloc(sizeof(struct node *));  //list should be sizeof(struct node) insted of node*
  printf("struct node is size %d\n",sizeof(struct node) );
  list->next = NULL;
  printf("len_s is %d\n", len_s);
}
----------------------
[guolili@localhost test]$ valgrind --tool=memcheck --leak-check=full ./t
==23588== Memcheck, a memory error detector
==23588== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==23588== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==23588== Command: ./t
==23588==
==23588== Invalid write of size 4
==23588==    at 0x8048452: main (t.c:36)
==23588==  Address 0x402715c is 0 bytes after a block of size 4 alloc'd
==23588==    at 0x40071AB: malloc (vg_replace_malloc.c:270)
==23588==    by 0x804844B: main (t.c:35)
==23588==
len_s is 255
==23588==
==23588== HEAP SUMMARY:
==23588==     in use at exit: 259 bytes in 2 blocks
==23588==   total heap usage: 2 allocs, 0 frees, 259 bytes allocated
==23588==
==23588== 4 bytes in 1 blocks are definitely lost in loss record 1 of 2
==23588==    at 0x40071AB: malloc (vg_replace_malloc.c:270)
==23588==    by 0x804844B: main (t.c:35)
==23588==
==23588== 255 bytes in 1 blocks are definitely lost in loss record 2 of 2
==23588==    at 0x40071AB: malloc (vg_replace_malloc.c:270)
==23588==    by 0x804842A: main (t.c:31)
==23588==
==23588== LEAK SUMMARY:
==23588==    definitely lost: 259 bytes in 2 blocks
==23588==    indirectly lost: 0 bytes in 0 blocks
==23588==      possibly lost: 0 bytes in 0 blocks
==23588==    still reachable: 0 bytes in 0 blocks
==23588==         suppressed: 0 bytes in 0 blocks
==23588==
==23588== For counts of detected and suppressed errors, rerun with: -v
==23588== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 12 from 8)





** Valgrind关于内存泄漏的描述
*** Indirectly lost
----------------------
#include <stdlib.h>
#include <string.h>
void ** rrr;
main()
{
 rrr = malloc(sizeof(void *));
 *rrr = malloc(sizeof(void *));
 rrr = NULL; //this will make rrr and *rrr address lost.
printf("Ii right?\n");

}
--------------------------
 valgrind --tool=memcheck --leak-check=full    ./tt
==18618== Memcheck, a memory error detector
==18618== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==18618== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==18618== Command: ./tt
==18618==
Ii right?
==18618==
==18618== HEAP SUMMARY:
==18618==     in use at exit: 8 bytes in 2 blocks
==18618==   total heap usage: 2 allocs, 0 frees, 8 bytes allocated
==18618==
==18618== 8 (4 direct, 4 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==18618==    at 0x40071AB: malloc (vg_replace_malloc.c:270)
==18618==    by 0x80483F1: main (tt.c:24)
==18618==
==18618== LEAK SUMMARY:
==18618==    definitely lost: 4 bytes in 1 blocks
==18618==    indirectly lost: 4 bytes in 1 blocks
==18618==      possibly lost: 0 bytes in 0 blocks
==18618==    still reachable: 0 bytes in 0 blocks
==18618==         suppressed: 0 bytes in 0 blocks
==18618==
=======================================
the second malloc is indrectly lost and the first malloc is definitely lost because rrr=NULL.


** possibly lost ,still reachable:
Still reachable: A pointer to the start of the block is found. This usually indicates programming sloppiness. Since the block is still pointed at, the programmer could, at least in principle, free it before program exit. Because these are very common and arguably not a problem, Memcheck won't report such blocks unless --show-reachable=yes is specified.
EG.
------
#include <stdlib.h>
void * rrr;
main()
{
 rrr = malloc(sizeof(void *));
 rrr = malloc(sizeof(void *));
// rrr = NULL; /*if this not comment out, then no still reachalbe, all definitely lost*/
printf("Am Ii right?\n");

}
---------------------------
 valgrind --tool=memcheck --leak-check=full  --show-reachable=yes  ./tt
==16555== Memcheck, a memory error detector
==16555== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==16555== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==16555== Command: ./tt
==16555==
Am Ii right?
==16555==
==16555== HEAP SUMMARY:
==16555==     in use at exit: 8 bytes in 2 blocks
==16555==   total heap usage: 2 allocs, 0 frees, 8 bytes allocated
==16555==
==16555== 4 bytes in 1 blocks are still reachable in loss record 1 of 2
==16555==    at 0x40071AB: malloc (vg_replace_malloc.c:270)
==16555==    by 0x8048401: main (tt.c:26)
==16555==
==16555== 4 bytes in 1 blocks are definitely lost in loss record 2 of 2
==16555==    at 0x40071AB: malloc (vg_replace_malloc.c:270)
==16555==    by 0x80483F0: main (tt.c:25)
==16555==
==16555== LEAK SUMMARY:
==16555==    definitely lost: 4 bytes in 1 blocks
==16555==    indirectly lost: 0 bytes in 0 blocks
==16555==      possibly lost: 0 bytes in 0 blocks
==16555==    still reachable: 4 bytes in 1 blocks
==16555==         suppressed: 0 bytes in 0 blocks
-------------------------
the second malloc is still reachable before end of the program, but first one will gone. 

We could see that definitely/indirectly/still reachable are memory leak but different kinds.
only possibley lost is unknow if it leak or not


** Valgrind的主要功能

Valgrind工具包包含多个工具，如Memcheck,Cachegrind,Helgrind, Callgrind，Massif。下面分别介绍个工具的作用：

*** Memcheck 工具主要检查下面的程序错误：

1.使用未初始化的内存 (Use of uninitialised memory)
----------------
struct node
{
int entry;
struct node * next;
}

main()
{
  char * p = malloc(len_s);
  struct node * list;
  list= malloc(sizeof(struct node ));
/* list = calloc(1, sizeof(struct node));*/ //using calloc could avoid this, it will set the allocated memory to 0 
  if(list->next == NULL) //valrind report
   printf();
}
--------------------------
Conditional jump or move depends on uninitialised value(s)
==19936==    at 0x804846B: main (t.c:37)

=============================
 
2.使用已经释放了的内存 (Reading/writing memory after it has been free’d) 

3.使用超过 malloc分配的内存空间(Reading/writing off the end of malloc’d blocks)(invalid write/read)
==6742== Address 0x1B908050 is 0 bytes after a block of size 40 alloc'd

4.对堆栈的非法访问 (Reading/writing inappropriate areas on the stack)
申请的空间是否有释放 (Memory leaks – where pointers to malloc’d blocks are lost forever)

5. malloc/free/new/delete申请和释放内存的匹配(Mismatched use of malloc/new/new [] vs free/delete/delete [])

6. src和dst的重叠(Overlapping src and dst pointers in memcpy() and related functions)
C的以下库函数拷贝数据从一块内存到另一块内存时: memcpy(), strcpy(), strncpy(), strcat(), strncat(). 源和目的都不允许溢出。
==27492== Source and destination overlap in memcpy(0xbffff294, 0xbffff280, 21)
==27492==    at 0x40026CDC: memcpy (mc_replace_strmem.c:71)
==27492==    by 0x804865A: main (overlap.c:40)

7.heap  and leak summary(detail)
--leak-check=full/yes is for leaking summary, this is the least effecting for a program, so if we focus
on more serious errors like above 6, we should not add this option


*** Callgrind
Callgrind收集程序运行时的一些数据，函数调用关系等信息，还可以有选择地进行cache 模拟。在运行结束时，它会把分析数据写入一个文件。callgrind_annotate可以把这个文件的内容转化成可读的形式。

*** Cachegrind
它模拟 CPU中的一级缓存I1,D1和L2二级缓存，能够精确地指出程序中 cache的丢失和命中。如果需要，它还能够为我们提供cache丢失次数，内存引用次数，以及每行代码，每个函数，每个模块，整个程序产生的指令数。这对优化程序有很大的帮助。

*** Helgrind
它主要用来检查多线程程序中出现的竞争问题。Helgrind 寻找内存中被多个线程访问，而又没有一贯加锁的区域，这些区域往往是线程之间失去同步的地方，而且会导致难以发掘的错误。Helgrind实现了名为” Eraser” 的竞争检测算法，并做了进一步改进，减少了报告错误的次数。

*** Massif
堆栈分析器，它能测量程序在堆栈中使用了多少内存，告诉我们堆块，堆管理块和栈的大小。Massif能帮助我们减少内存的使用，在带有虚拟内存的现代系统中，它还能够加速我们程序的运行，减少程序停留在交换区中的几率。

this tool could get every period of time the consumption of the memory.
--tools=massif 
ms_print massif.out....


and pmap you could only get a timestamp's memory consumption status
[guolili@localhost test]$ pmap -x `pidof memtst`
655:   ./memtst
Address   Kbytes     RSS    Anon  Locked Mode   Mapping
00299000      84       -       -       - r-x--  ld-2.3.4.so
002ae000       4       -       -       - r-x--  ld-2.3.4.so
002af000       4       -       -       - rwx--  ld-2.3.4.so
002b2000    1168       -       -       - r-x--  libc-2.3.4.so
003d6000       4       -       -       - r-x--  libc-2.3.4.so
003d7000      12       -       -       - rwx--  libc-2.3.4.so
003da000       8       -       -       - rwx--    [ anon ]
08048000       4       -       -       - r-x--  memtst
08049000     516       -       -       - rwx--  memtst
0952a000  895112       -       -       - rwx--    [ anon ] //this heap
40000000       4       -       -       - r-x--    [ anon ]
40001000       4       -       -       - rwx--    [ anon ]
4001a000 1567708       -       -       - rwx--    [ anon ]
9fb49000  524300       -       -       - rw---    [ stack ]
bfb4c000    4112       -       -       - rwx--    [ anon ]
-------- ------- ------- ------- -------
total kB 2993044       -       -       -

