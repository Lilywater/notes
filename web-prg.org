* mysql configuration
** client
*** connect into sql server
mysql -u<username> -p<passwrod>


To display a list of databases, type the following command at the mysql> prompt:

show databases;

To access a specific database, type the following command at the mysql> prompt, replacing DBNAME with the database that you want to access:

use DBNAME;

After you access a database, you can run SQL queries, list tables, and so on. Additionally:

    To view a list of MySQL commands, type help at the mysql> prompt.
       SHOW WARNINGS;
there will be mysql>  prompt. after that was capitalized sql language.


*** show databases in the server
mysql> SHOW DATABASES;

*** create database 
mysql> CREATE DATABASE <dbname>;

*** switch curret database
mywql> USE <dbname>;


*** check if the table is the current one
mysql> SELECT DATABASE();
+------------+
| DATABASE() |
+------------+
| zencart    |
+------------+
1 row in set (0.00 sec)

*** show tables in the database.
mysql> SHOW TABLES;


*** mysql> SHOW TABLES;
+---------------------+
| Tables_in_menagerie |
+---------------------+
| event               |
| pet                 |
+---------------------+

The name of the column in the output produced by this statement is always Tables_in_db_name, where db_name is the name of the database. See Section 13.7.5.38, “SHOW TABLES Syntax”, for more information.

If you want to find out about the structure of a table, the DESCRIBE statement is useful; it displays information about each of a table's columns:

*** mysql> DESCRIBE pet;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(20) | YES  |     | NULL    |       |
| owner   | varchar(20) | YES  |     | NULL    |       |
| species | varchar(20) | YES  |     | NULL    |       |
| sex     | char(1)     | YES  |     | NULL    |       |
| birth   | date        | YES  |     | NULL    |       |
| death   | date        | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+

*** retrive all data in a table.
mysql> SELECT * FROM pet;
|----------+--------+---------+------+------------+------------|
| name     | owner  | species | sex  | birth      | death      |
|----------+--------+---------+------+------------+------------|
| Fluffy   | Harold | cat     | f    | 1993-02-04 | NULL       |
| Claws    | Gwen   | cat     | m    | 1994-03-17 | NULL       |
| Buffy    | Harold | dog     | f    | 1989-05-13 | NULL       |
| Fang     | Benny  | dog     | m    | 1990-08-27 | NULL       |
| Bowser   | Diane  | dog     | m    | 1979-08-31 | 1995-07-29 |
| Chirpy   | Gwen   | bird    | f    | 1998-09-11 | NULL       |
| Whistler | Gwen   | bird    | NULL | 1997-12-09 | NULL       |
| Slim     | Benny  | snake   | m    | 1996-04-29 | NULL       |
| Puffball | Diane  | hamster | f    | 1999-03-30 | NULL       |
|----------+--------+---------+------+------------+------------|
** server
** backup database and restore them
*** backup
/mnt/hdisk/database_bak $ mysqldump -u root -p123 mysql | gzip > 03_27_17.gz
*** restore
gzip -d 03_27_17.gzip
mysql -u root --password=password mysql <03_27_17

* php language
** report error option
For syntax errors, you need to enable error display in the php.ini. By default these are turned off because you don't want a "customer" seeing the error messages. Check this page in the PHP documentation for information on the 2 directives: error_reporting and display_errors. display_errors is probably the one you want to change. If you can't modify the php.ini, you can also add the following lines to an .htaccess file:

php_flag  display_errors        on
php_value error_reporting       2039

You may want to consider using the value of E_ALL (as mentioned by Gumbo) for your version of PHP for error_reporting to get all of the errors. more info

3 other items: (1) You can check the error log file as it will have all of the errors (unless logging has been disabled). (2) Adding the following 2 lines will help you debug errors that are not syntax errors:

error_reporting(-1);
ini_set('display_errors', 'On');
error_reporting(0); // this will switch off all error reporting


** require and include difference 
require is identical to include except upon failure it will also produce a fatal 
E_COMPILE_ERROR level error. In other words, it will halt the script whereas include only emits a warning (E_WARNING) which allows the script to continue.

** isset VS. emptry
PHP的isset()函数 一般用来检测变量是否设置
格式：bool isset ( mixed var [, mixed var [, ...]] )

功能：检测变量是否设置

返回值：

若变量不存在则返回 FALSE
若变量存在且其值为NULL，也返回 FALSE
若变量存在且值不为NULL，则返回 TURE
同时检查多个变量时，每个单项都符合上一条要求时才返回 TRUE，否则结果为 FALSE
版本：PHP 3, PHP 4, PHP 5
更多说明：
使用 unset() 释放变量之后，它将不再是 isset()。
PHP函数isset()只能用于变量，传递任何其它参数都将造成解析错误。
检测常量是否已设置可使用 defined() 函数。

PHP的empty()函数 判断值为否为空

格式：bool empty ( mixed var )

功能：检查一个变量是否为空

返回值：

若变量不存在则返回 TRUE
若变量存在且其值为""、0、"0"、NULL、、FALSE、array()、var $var; 以及没有任何属性的对象，则返回 TURE
若变量存在且值不为""、0、"0"、NULL、、FALSE、array()、var $var; 以及没有任何属性的对象，则返回 FALSE 
